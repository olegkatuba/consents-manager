{"version":3,"sources":["Consents.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["columns","field","headerName","width","valueFormatter","params","value","Date","toLocaleString","useStyles","makeStyles","container","display","flexDirection","alignItems","margin","headerTitle","justifyContent","headerRoot","consentRoot","maxWidth","consentsList","maxHeight","overflow","templateBorder","borderLeft","Consents","classes","useParams","provider","userId","useState","domains","setDomains","useEffect","axios","get","then","res","data","catch","err","console","log","className","map","domain","Accordion","TransitionProps","timeout","AccordionSummary","expandIcon","id","CardHeader","title","root","Typography","variant","target","rel","href","hostname","settingsId","subheader","controllerId","AccordionDetails","style","templates","template","borderLeftColor","consents","status","dataProcessor","Button","color","borderColor","defaultCategoryLabel","descriptionOfService","height","getRowId","row","consentId","timestamp","rows","pageSize","rowsPerPageOptions","disableSelectionOnClick","templateId","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40ed2b7d.chunk.js","sourcesContent":["import Accordion from \"@material-ui/core/Accordion\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport Button from \"@material-ui/core/Button\";\n\nconst apiUrl = 'https://cmp-login.herokuapp.com/api';\n// const apiUrl = 'http://localhost:3000/api';\n\nconst columns = [\n  {\n    field: \"status\",\n    headerName: \"Status\",\n    width: 150,\n    valueFormatter: (params: any) => {\n      return params.value ? \"Accepted\" : \"Denied\";\n    },\n  },\n  {\n    field: \"timestamp\",\n    headerName: \"Updated at\",\n    width: 200,\n    valueFormatter: (params: any) => {\n      return new Date(+params.value * 1000).toLocaleString();\n    },\n  },\n  {\n    field: \"updatedBy\",\n    headerName: \"Updated by\",\n    width: 150,\n  },\n  {\n    field: \"settingsVersion\",\n    headerName: \"Settings version\",\n    width: 200,\n  },\n];\n\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    margin: \"50px\",\n  },\n  headerTitle: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  headerRoot: {\n    width: \"100%\",\n  },\n  consentRoot: {\n    display: \"block\",\n    maxWidth: \"900px\",\n  },\n  consentsList: {\n    maxHeight: \"500px\",\n    maxWidth: \"900px\",\n    overflow: \"auto\",\n  },\n  templateBorder: {\n    borderLeft: \"8px solid\",\n  },\n});\n\nfunction Consents() {\n  const classes = useStyles();\n  const { provider, userId } =\n    useParams<{ provider: string; userId: string }>();\n  const [domains, setDomains] = useState<any[]>([]);\n  useEffect(() => {\n    axios\n      .get(`${apiUrl}/consents/${provider}/${userId}`)\n      .then((res) => res.data)\n      .then((data) => {\n        setDomains(data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [provider, userId]);\n  return (\n    <div className={classes.container}>\n      {domains.map((domain: any) => (\n        <Accordion\n          key={domain.hostname + domain.settingsId}\n          TransitionProps={{ timeout: 300 }}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <CardHeader\n              classes={{\n                title: classes.headerTitle,\n                root: classes.headerRoot,\n              }}\n              title={\n                <>\n                  <Typography variant=\"h5\">\n                    <a\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      href={`https://${domain.hostname}`}\n                    >\n                      {domain.hostname}\n                    </a>\n                  </Typography>\n\n                  <span>Settings Id: {domain.settingsId}</span>\n                </>\n              }\n              subheader={`Controller Id: ${domain.controllerId}`}\n            />\n          </AccordionSummary>\n          <AccordionDetails\n            classes={{\n              root: classes.consentRoot,\n            }}\n          >\n            <Typography style={{ margin: \"0 16px 16px\" }} variant=\"h5\">\n              Services\n            </Typography>\n            <div className={classes.consentsList}>\n              {domain.templates.map((template: any) => (\n                <Accordion\n                  classes={{\n                    root: classes.templateBorder,\n                  }}\n                  key={template.templateId}\n                  style={{\n                    borderLeftColor: template.consents[0]?.status\n                      ? \"#17855E\"\n                      : \"#DD2E44\",\n                  }}\n                >\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                  >\n                    <CardHeader\n                      classes={{\n                        title: classes.headerTitle,\n                        root: classes.headerRoot,\n                      }}\n                      title={\n                        <>\n                          <span>{template?.dataProcessor}</span>\n                          {template.consents[0]?.status ? (\n                            <Button\n                              style={{\n                                color: \"#17855E\",\n                                borderColor: \"#17855E\",\n                              }}\n                              variant=\"outlined\"\n                            >\n                              Accepted\n                            </Button>\n                          ) : (\n                            <Button\n                              style={{\n                                color: \"#DD2E44\",\n                                borderColor: \"#DD2E44\",\n                              }}\n                              variant=\"outlined\"\n                            >\n                              Denied\n                            </Button>\n                          )}\n                        </>\n                      }\n                      subheader={template?.defaultCategoryLabel}\n                    />\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <div style={{ width: \"100%\" }}>\n                      <Typography variant=\"body2\">\n                        {template?.descriptionOfService}\n                      </Typography>\n                      <Typography style={{ margin: \"16px 0\" }} variant=\"h5\">\n                        History\n                      </Typography>\n                      <div style={{ height: 370, width: \"100%\" }}>\n                        <DataGrid\n                          getRowId={(row) => row.consentId + row.timestamp}\n                          rows={template.consents}\n                          columns={columns}\n                          pageSize={5}\n                          rowsPerPageOptions={[5]}\n                          disableSelectionOnClick\n                        />\n                      </div>\n                    </div>\n                  </AccordionDetails>\n                </Accordion>\n              ))}\n            </div>\n          </AccordionDetails>\n        </Accordion>\n      ))}\n    </div>\n  );\n}\n\nexport default Consents;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Consents from \"./Consents\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/consents/:provider/:userId\">\n          <Consents />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}